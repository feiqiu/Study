2017-03-27
makefile的常见环境变量
KERNEL_PATH
CC
CFLAGS

2017-03-28
1）隐含规则：
自动推导
使用一些系统变量
模式规则；后缀规则

2）使用隐含规则
隐含规则库
依赖规则  写命令

3）隐含规则一览表
12条

4）隐含规则使用的变量
make -R或--no-builtin-variables  取消定义的变量对隐含规则的作用
关于命令的变量：20个
关于参数的变量：13个

5）隐含规则链

6）定义模式规则
1、模式规则介绍

2、示例

3、自动化变量

4、模式的匹配

5、重载内建隐含规则

7）老式风格的“后缀规则”

8）隐含规则搜索算法

05-11
makefile定义模式规则
模式规则：目标的定义需要有“%”字符

“%”的意思是表示一个或多个任意字符
“%”表示长度任意的非空字符串


依赖目标的“%”取决于于其目标

注意：“%”在变量和函数展开后才展开，其中变量和在make载入Makefile时就展开，“%”则发生在运行时！！！

自动化变量：
$@：目标集
表示规则中的目标文件集。在模式规则中，如果有多个目标，那么，"$@"就是匹配于目标中模式定义的集合。

$%：函数库！！！的依赖目标集
仅当目标是函数库文件中，表示规则中的目标成员名。例如，如果一个目标是"foo.a(bar.o)"，那么，"$%"就是 "bar.o"，"$@"就是"foo.a"。如果目标不是函数库文件（Unix下是[.a]，Windows下是[.lib]），那么，其值为空。

$< ：普通规则：第一个依赖目标；模式规则：即依赖目标集
依赖目标中的第一个目标名字。如果依赖目标是以模式（即"%"）定义的，那么"$<"将是符合模式的一系列的文件集。注意，其是一个一个取出来的。

$?：只对跟新的操作，提高效率
所有比目标新的依赖目标的集合。以空格分隔。

$^：依赖目标的集合，去重
所有的依赖目标的集合。以空格分隔。如果在依赖目标中有多个重复的，那个这个变量会去除重复的依赖目标，只保留一份。

$+：依赖目标的集合，不去重
这个变量很像"$^"，也是所有依赖目标的集合。只是它不去除重复的依赖目标。

$*：模式规则才去用，表示“%”前面部分
这个变量表示目标模式中"%"及其之前的部分。如果目标是"dir/a.foo.b"，并且目标的模式是"a.%.b"，那么，"$*"的值就是"dir/a.foo"。这个变量对于构造有关联的文件名是比较有较。如果目标中没有模式的定义，那么"$*"也就不能被推导出，但是，如果目标文件的后缀是make所识别的，那么"$*"就是除了后缀的那一部分。例如：如果目标是"foo.c"，因为".c"是make所能识别的后缀名，所以，" $*"的值就是"foo"。这个特性是GNU make的，很有可能不兼容于其它版本的make，所以，你应该尽量避免使用"$*"，除非是在隐含规则或是静态模式中。如果目标中的后缀是make所不能识别的，那么"$*"就是空值。

