
熟悉了解Pycharm,快捷键，如何设置，配置，管理工程
安装Anaconda

Ubuntu 16.04安装PyCharm－Python IDE
https://www.jianshu.com/p/7b1357920ceb


手把手教你配置最漂亮的PyCharm界面，Python程序员必备！
https://www.jianshu.com/p/90b1edeb120f

Installing on Linux
http://docs.anaconda.com/anaconda/install/linux/

Anaconda3-5.3.0-Linux-x86_64.sh
md5：4321e9389b648b5a02824d4473cfdb5f
sha256：cfbf5fe70dd1b797ec677e63c61f8efc92dad930fd1c94d60390bb07fdc09959


/×
young@young-desktop:~$ sudo pip install pillow
Traceback (most recent call last):
  File "/usr/bin/pip", line 9, in <module>
    from pip import main
ImportError: No module named 'pip'

在Python3.6版本的Anaconda3中配置Python3.5
https://conda.io/docs/user-guide/tasks/manage-python.html


Initializing Anaconda3 in /home/young/.bashrc
A backup will be made to: /home/young/.bashrc-anaconda3.bak
×/



//------------------------------------20190227--------------------------------------------------------
模块
    多文件编程
	一个.py文件称之为一个模块
	模块的命名注意！
	Python的所有内置函数查看：
	Built-in Functions — Python 3.7.2 documentation - https://docs.python.org/3/library/functions.html

	按目录来组织模块的方法：包package
	包：目录下有__init__.py的文件
//-------------------------------20190302------------------------------------------------------------
	使用模块：
	特殊变量__name__:命令行运行模块文件时，特殊变量__name__置为__main__,可用来测试模块文件
	
	作用域：
	一个下划线前缀或者两个下划线前缀_xxx或__xxx：希望函数和变量仅仅在模块内部使用,只是不应该被外部直接引用,从编程习惯不应该去引用
	特殊变量__doc__:文档注释
	

//------------------------------------20190219---------------------------------------------------------

类和实例：
	Class:抽象的模板
	Instance:实例是根据类创建出来的一个个具体的对象

	定义类：
		class Student():
			pass
	//类名通常是大写开头的单词
	创建实例：通过类名+（）
		bart = Student()

	给实例变量绑定属性：
		bart.name = 'Bart Simpson'

	__init__方法在创建实例的时候，绑定属性;
	__init__方法的第一个参数一定是self;

	注意：特殊方法“__init__”前后分别有两个下划线！！！

	类的方法：
		要定义一个方法，除了第一个参数是self外，其他和普通函数一样。

和静态语言不同，Python允许对实例变量绑定任何数据，也就是说，对于两个实例变量，虽然它们都是同一个类的不同实例，但拥有的变量名称都可能不同。


//------------------------------------20190220---------------------------------------------------------
访问限制：
	私有变量（private）：，只有内部可以访问，外部不能访问
	把属性的名称前加上两个下划线__，就变成了一个私有变量

	增加set_score方法，修改私有变量;
	在方法中，可以对参数做检查，避免传入无效的参数;
	
	特殊变量：在Python中，变量名类似__xxx__的，也就是以双下划线开头，并且以双下划线结尾的，是特殊变量，特殊变量是可以直接访问的，不是private变量，所以，不能用__name__、__score__这样的变量名。

	以一个下划线开头的实例变量名：“虽然我可以被访问，但是，请把我视为私有变量，不要随意访问”

	通过特殊方法访问双下划线的私有变量：_Student__name
	
	只有前双下划线：私有变量
	前后双下划线：系统特殊变量
	单前下划线：潜规则私有变量
	前单下中间双下：强制访问私有变量 //禁忌!!!

	注意外部代码绑定双前下划线，不是私有变量，注意别混淆

继承与多态：
	继承的写法;
	继承：子类获得了父类的全部功能;能实现多态
	class：也是数据类型，如标准数据类型：str，list，dict
	
	isinstance():判断一个变量是否是某个类型

	多态的思想：自动匹配子类

	变量 实例 对象

	确保子类run()方法编写正确：C++的函数覆盖
	
	开闭原则：对扩展开放;对修改封闭，需要经常理解
	
	静态语言：严格的条件，条件一定是子类
	动态语言：看起来像鸭子，类似，有匹配得上的方法的对象

//----------------------------------20190221-------------------------------------

获取对象信息
判断对象类型：type()
	基本类型
	指向函数及类的变量
if判断：比较两个变量的type类型
types()模块

isinstance():判断类继承
isinstance()通用，判断类型一网打尽

获取对象的属性和方法：dir()
getattr()
setattr()
hasattr()
//--------------------------------20190222--------------------------------------
实例属性和类属性
Python 动态语言：根据类创建的实例可以任意绑定属性

绑定属性：1.通过实例属性 2.通过self变量
实例属性优先级高于类属性;
删除实例属性：del s.name 
注意习惯：实例属性不和类属性同名
//-------------------------------20190302-------------------------------------------
错误，调试和测试：pdb可单步调试
错误捕获：
	ZeroDivisionError
	ValueError
	UnicodeError
	常见的错误类型和继承关系:
	https://docs.python.org/3/library/exceptions.html#exception-hierarchy
	
	
	错误处理：try...except...finally错误处理机制
	正常执行try,有错执行except，最后的finally存在的话一定被执行
	
	try...except:可跨越多层调用
	
	===========================================================

	调用栈：
	分析错误的调用栈信息，定位出错误
	
	============================================================
	记录错误
	内置logging模块记录错误信息：打出错误信息，并能继续执行
	import logging
	
	配置后:把错误记录到日志文件
	
	=====================================================
	抛出错误：
	自定义错类
	raise语句：
	
//-------------------------------20190308-------------------------------------------------
调试:
	1.print()
	2.断言
		assert n != 0, 'n is zero'
		启动python 解释器时可以用-0参数来关闭
	3.logging
		可以输出到文件
		import logging
		指定记录信息的等级：debug info warning error
	4.pdb
		python -m pdb err.py //-m pdb 启动
		l：查看代码
		n:单步执行
		c:继续运行
		p 变量名:查看变量
		q:推出调试
		
		import pdb
		pdb.set_trace() //设置进入pdb调试环境的断点
		
	
	
	






	
	
	
	

	
	
	


	

	




	


























