

//---------------------------------20190607----------------------------------
数据可视化
matplotlib:数据可视化函数库
matplotlib的子模块pyplot提供了2D图表制作的基本函数
import matplotlib.pyplot as plt
plt.scatter(x,y)
plt.show()

//---------------------------------20190608----------------------------------
sorted排序后不改变原序列，
.sort()和.reverse()函数都是永久性改变，直接改变原列表中元素，
reverse()函数将原列表元素倒置，
sort(reverse=True)先对列表中的元素进行排序后倒置

CSV(Comma-Separated Values)是一种通用的、相对简单的文件格式
• 在商业和科学领域上广泛使用
• 规则
1. 以行为单位
2. 每行表示一条记录
3. 以英文逗号分割每列数据(如果数据为空,逗号也要保留)
4. 列名通常放置在文件第一行


filter()
map()

跨行字符串用三个单引号括起来

高效地处理和解析HTML的库：beautifulsoup4
DOM:Document Object Model 文档对象模型

//---------------------------------20190731----------------------------------
https://pandas.pydata.org/pandas-docs/stable/visualization.html
Pandas用来做什么？
Pandas
• 一个强大的分析结构化数据的工具集
• 基础是NumPy,提供了高性能矩阵的运算
• 应用,数据挖掘,数据分析
• 如,学生成绩分析、股票数据分析等。
• 提供数据清洗功能

Pandas的数据结构
Pandas的数据操作
Pandas统计计算和描述

Pandas数据清洗：处理缺失数据
	dropna()丢失缺失数据
	fillna()添充缺失数据
	• 数据过滤
	• df[filter_condition] 依据filter_condition对数据进行过滤
	
Pandas数据可视化：
	• Pandas提供了内建的绘图功能(基于matplotlib)
	• plot(kind, x, y, title, figsize)
	x, y 横纵坐标对应的数据列
	title图像名称
	figsize图像尺寸
	• 保存图片
	eplt.savefig()
	
////-----------------------20191216-------------------------------------------------------
第二讲：

	Python 3.x 关键字
	• 查看方式:
	import keyword
	print(keyword.kwlist)
	
	lambda函数
	• 特殊函数—匿名函数
	• 使用方法:
	<函数名> = lambda <参数列表>: <表达式>
	• 用于简单的、能够在一行内表示的函数,计算结果为返回值

第三讲：
	使用turtle库在Python中绘制简单图形 //海龟绘图
	• import turtle
	• 引入绘制图形的turtle库
	画笔控制函数:
	• turtle.penup() 抬起画笔,之后移动画笔不绘制形状
	• turtle.pendown() 落下画笔,之后移动画笔绘制形状
	• turtle.pensize() 设置画笔宽度
	• turtle.pencolor() 设置画笔颜色,常用的颜色:
		whilte, black, grey, darkgreen, gold, violet, purple
	• 详细API请参考:
	https://docs.python.org/3.0/library/turtle.html
	
	递归：
	• 函数定义中调用函数自身的方式称为递归
	• 能够非常简洁地解决重要问题
	• 每次函数调用时,函数参数会临时存储,相互没有影响
	• 达到终止条件时,各函数逐层结束运算,返回计算结果
	• 要注意终止条件的构建,否则递归无法正常返回结果
	
	• 利用递归函数绘制分形树(fractal tree)
	• 分形几何学的基本思想:客观事物具有自相似的层次结构,局部与整体
	在形态、功能、信息、时间、空间等方面具有统计意义上的相似性,成
	为自相似性。自相似性是指局部是整体成比例缩小的性质。
	

第四讲：

	Python中常用的数值类型
	• 整数类型,与数学中的整数概念一致
	• 浮点数类型,带有小数点及小数的数值
		如:0.0, -3.14, 3.4e-3 (科学计数法)
	• 类型转换
		整数->浮点数,float(4) -> 4.0
		浮点数->整数,int(3.14)->3,只会保留整数部分
		字符串->整数,字符串->浮点数, int(‘3’)->3, float(‘3.14’)->3.14
	• 如何判断类型? type() 函数
	
	
	字符串操作补充：
	• 字符串分割
	str.split(), https://docs.python.org/3/library/stdtypes.html#str.split
	• 字符串格式化输出,使用{}占位
	str.format()
	
	异常处理机制
	• 引入异常处理机制可以用来解
	决程序运行时的错误
	• 语法
	try:			
		<body>  //当 Python遇到try语句,先尝试执行try包含的代码块,
	except <ErrorType1>:  //• 如果没有错误发生,执行try-except后面的语句
		<handler1>
	except <ErrorType2>:  //• 如果发生错误,Python寻找一个符合该错误的异常语句,然后执行相应的excep的处理代码
		<handler2>
	except:
		<handler0>
	
//-----------------------20191215-------------------------------------------------------
第五讲：
	列表(list)是有序的元素集合
	可通过索引访问单个元素
	可通过区间索引访问子列表内容
	
	列表操作符：
	list1 + list2：合并(连接)两个列表
	list1 * n：重复n次列表内容
	len(list1)：返回列表长度(元素个数)
	x in list1：检查元素是否在列表中
	list1.append(x)：将x添加到列表末尾
	list1.sort()：对列表元素排序
	list1.reverse()：将列表元素逆序
	list1.index(x)：返回第一次出现元素x的索引值
	list1.insert(i, x)：在位置i处插入新元素x
	list1.count(x)：返回元素x在列表中的数量
	list1.remove(x)：删除列表中第一次出现的元素x
	list1.pop(i)：取出列表中i位置上的元素,并将其删除
	
	
	math库：
	math.pi：圆周率
	math.ceil(x)：对x向上取整
	math.floor(x)：对x向下取整
	math.pow(x, y)：x的y次方
	math.sqrt(x)：x的平方根
	math.fsum(list1)：对集合内的元素求和
	math库函数请参考: https://docs.python.org/3/library/math.html
	
	range(n) 返回一个可迭代的对象
	list(range(n))将迭代类型转换为列表类型
	
	• 变量的作用范围
	• 局部,函数内的变量作用范围只在函数内
	• 全局,函数外的变量,在所有函数中都能使用,global
	
	• 处理时间的标准函数库datetime
	• datetime.now() 获取当前日期和时间
	• 字符串 -> datetime
		datetime.strptime(),解析时间字符串
	• datetime -> 字符串
		datetime.strftime() 格式化datetime为字符串显示
	• 日期时间格式参考:
		https://docs.python.org/3/library/datetime.html#strftime-strptime-behavior
	• isocalendar() 返回年,周数,及周几
	• 更多操作参考:
		https://docs.python.org/3/library/datetime.html#module-datetime
		
//-----------------------20191213-------------------------------------------------------
第六讲：
	元组(tuple)：特殊的序列类型
	一旦创建，不能修改；代码更安全
	使用逗号和园括号来表示
	访问方式和列表相同
	用于：固定数据项,函数多返回值
	
	特点：
	1.元组的元素可以不同类型
	2.元素存在先后关系，通过索引访问元组的元素
	
	//------------------------------------------------------------
	元组不可变，列表(list)可变
	元组可以由不同数据类型的数据组成;列表通常由相同类型的数据组成
	元组表示的是结构,列表表示的是顺序 //理解理解
	
	//------------------------------------------------------------
	集合(set):包含0个或多个数据项的无序组合 //数据项的理解
	集合中的元素不可重复
	集合是无序组合,没有索引和位置的概念
	set()函数用于集合的生成,返回结果是一个无重复且排序任意的集合
	集合通常用于表示成员间的关系、元素去重等
	
	s - t 或 s.difference(t) //差集
	s & t 或 s.intersection(t)//交集
	s | t 或 s.union(t) //并集
	s^t 或 s.symmetric_difference(t) //
	
	//------------------------------------------------------------
	字典(dict):键--值”数据项的组合,每个元素是一个键值对
	字典类型以键为索引,一个键对应一个值
	字典类型的数据是无序的
	
	增加一项
	访问
	删除某项
	查询是否存在
	
	遍历key
	遍历value
	遍历item
	
	//关于时间相关的学习
	strftime()中提供了许多格式化日期字符串的操作
	https://docs.python.org/3/library/time.html#time.strftime
	
//-----------------------20191217-------------------------------------------------------
第七讲：
	1. 密码长度至少8位  //python 的分布式运行，4台电脑
	2. 密码含有数字
	3. 密码含有字母
	
	str. isnumeric()
	检测字符串是否只由数字组成
	
	str. isalpha()
	检测字符串是否只由字母组成
	
	str.islower()
	检测字符串中所有的字母是否都为小写
	
	str.isupper()
	检测字符串中所有的字母是否都为大写
	
	更多isxxx()方法请参考:https://docs.python.org/3/library/stdtypes.html#string-methods
//---------------------------------------------------------------------------------
	文件的基础：
		• 文件:存储在外部介质(如:硬盘)上的数据或信息的集合
		• 文本文件:一般指只有字符编码存储的文件,能够被最简单的文本编辑
		器直接读取
		• 编码:信息从一种形式转换为另一种形式的过程
		• 常用的编码:
		• ASCII, Unicode, UTF-8...
		• 多行文本,用 \n 表示换行
	文件的操作：
		• 步骤:打开文件 -> 操作文件(读、写等)-> 关闭文件
		• 1. 打开文件:建立文件与程序的关联
			open(filename, mode)
			filename:文件名(包括路径);mode: 打开模式
				r：只读,文件不存在则报错
				w:只写,文件不存在则自动创建
				a：在文件末尾附加
				r+:读写
		• 2. 操作文件:写入,读取,等
		• 写入操作:从计算机内存向文件写入数据
		• write(): 将文本数据写入文件中
		• writelines(): 将字符串列表写入文件中
		• 3. 关闭文件:终止程序与文件的关联
		• close()
//---------------------------------------------------------------------------------
		• 读取操作:从文件中读取数据到计算机内存中
		• read(): 返回值为包含整个文件内容的一个字符串
		• readline(): 返回值为文件下一行内容的字符串
		• readlines(): 返回值为整个文件内容的列表,每项是以换行符为结尾的一行字符串
//---------------------------------------------------------------------------------
	面向过程与面向对象：
	• 面向过程(POP):以程序执行过程为设计流程的编程思想
	• 面向对象(OOP):以事物为中心的编程思想
	• 什么是对象(Object)?
	• 现实世界中的对象:属性,行为
	• 对象例子:
		• 波斯猫,属性:品种、颜色、大小;行为:叫、捉老鼠
		• 吉普车,属性:类型、用途;行为:发动、停车
		
	• 类(class):某种类型集合的描述
	• 属性:类本身的一些特性
	• 方法:类所能实现的行为
	
	• 类的定义
	class ClassName
	__init__(self)构造函数:初始化对象的各属性，self代表类的实例
//---------------------------------------------------------------------------------
	面向对象的特点：
	• 封装
		• 将数据及相关操作打包在一起
		• 支持代码复用
	• 继承
		• 子类(subclass)借用父类(superclass)的行为
		• 避免重复操作,提升代码复用程度
		• 定义 class ClassName(SuperClassName)
	• 多态
		• 在不同情况下用一个函数名启用不同方法
		• 灵活性
	
//----------------------------------------------------------------------------------------------
第八讲：
	random模块用于生成随机数
	• 常用函数
		ramdom():生成一个[0, 1.0)之间的随机浮点数
		uniform(a,b):生成一个a到b之间的随机浮点数
		randint(a,b):生成一个a到b之间的随机整数
		choice(<list>):从列表中随机返回一个元素
		shuffle(<list>):将列表中元素随机打乱
		sample(<list>,k):从指定列表中随机获取k个元素
		更多random模块的方法:https://docs.python.org/3/library/random.html
		
		• enumerate()函数用于将可遍历的组合转换为一个索引序列
		• 一般用于for循环中,同时列出元素和元素的索引号
		
//----------------------------------------------------------------------------------------------
	zip()函数用于将对应的元素打包成一个个元组
	• 注意:元组中的元素是不可修改的,若要修改需要转换成字典或其他
	• dict(zip(l1, l2))

//----------------------------------------------------------------------------------------------
	• Python数据可视化
	• matplotlib模块
	
	• matplotlib是一个数据可视化函数库
	• matplotlib的子模块pyplot提供了2D图表制作的基本函数
	• 例子:https://matplotlib.org/gallery.html
	
	• 散点图绘制
		import matplotlib.pyplot as plt
		# x, y分别是x坐标和y坐标的列表
		plt.scatter(x, y)
		plt.show()
		
//----------------------------------------------------------------------------------------------
	• 直方图是一种对数据分布情况的图形表示
	• 首先要对数据进行分组,然后统计每个分组内数据的数量。
	• 作用:
		• 显示各分组频率或数量分布的情况
		• 易于显示各组之间频率或数量的差别
	
	• matplotlib绘制直方图
	• plt.hist(data, bins)
		data: 数据列表
		bins: 分组边界
//----------------------------------------------------------------------------------------------	
	• NumPy (Numeric Python):用Python实现的科学计算库
	• 包括:
		1. 强大的N维数组对象array
		2. 成熟的科学函数库
		3. 实用的线性代数、随机数生成函数等
	•NumPy的操作对象是多维数组ndarray
		•ndarray.shape 数组的维度
	• 创建数组:np.array(<list>),np.arrange() ...
	• 改变数组形状 reshape()
	
	
	• NumPy创建随机数组
	• np.random.randint(a, b, size)
		创建 [a, b)间形状为size的数组
		
	• NumPy基本运算
	• 以数组为对象进行基本运算,即向量化操作
	
	• np.histogram() 输出直方图的统计结果
	
	matplotlib绘图补充:
	• plt.xticks() 设置x坐标的坐标点位置及标签
	• plt.title()设置绘图标题
	• plt.xlabel(), plt.ylabel() 设置坐标轴的标签
	
	
//------------------------------------------191218----------------------------------------------------
第九讲：
	JSON格式：JSON(JavaScript Object Notation)是一种轻量级数据交换格式
	可以对复杂数据进行表达和存储,易于阅读和理解
	• 规则
		1. 数据保存在键值对中
		2. 键值对之间由逗号分隔
		3. 花括号用于保存键值对数据组成的对象
		4. 方括号用于保存键值对数据组成的数组
	•采用对象、数组方式组织起来的键值对可以表示任何结构的数据
	•JSON格式是互联网上主要使用的复杂数据格式之一
	
	JSON库是处理JSON格式的Python标准库
	• 两个过程:
		• 编码(encoding),将Python数据类型转换成JSON格式的过程
		• 解码(decoding),从JSON格式中解析数据对应到Python数据类型的过程
		
	dumps():将Python数据类型转换为JSON格式
	loads():将JSON格式字符串转换为Python数据类型
	dump():与dumps()功能一致,输出到文件
	load():与loads()功能一致,从文件读入
	
	列表排序：
	list.sort(func):func指定了排序的方法
	func可以通过lambda函数实现
//----------------------------------------------------------------------------------------------
	CSV格式：CSV(Comma-Separated Values)是一种通用的、相对简单的文件格式
	
	• 在商业和科学领域上广泛使用
	• 规则
		1. 以行为单位
		2. 每行表示一条记录
		3. 以英文逗号分割每列数据(如果数据为空,逗号也要保留)
		4. 列名通常放置在文件第一行
	
	• import csv
	• csv.writerow(list) 将列表中的元素写入文件的一行中

//----------------------------------------------------------------------------------------------	
	CSV文件读取：
		imort csv
		csv.reader() 将每行记录作为列表返回
	文件操作补充：
		• 使用with语句,不管在处理文件过程中是否发生异常,都能保证with语句执行完毕后关闭文件。不需要close()语句。
		
	OS模块：os模块提供了与系统、目录操作相关的功能,不受平台的限制
	os.remove():删除文件
	os.makedirs():创建多层目录
	os.rmdir():删除单级目录
	os.rename():重命名文件
	os.path.isfile():判断是否为文件
	os.path.isdir():判断是否为目录
	os.path.join():连接目录,如 path1 连接 path2为path1/path2
	os.path.splitext():将文件分割成文件名与扩展名,如分割tmp.txt为 tmp 和 .txt

//----------------------------------------------------------------------------------------------
	网络爬虫：自动抓取互联网信息的程序;利用互联网数据进行分析、开发产品
	步骤：
		1. 通过网络链接获取网页内容
		2. 对获得的网页内容进行处理
	
	requests模块：requests模块是一个简洁且简单的处理HTTP请求的工具
	支持非常丰富的链接访问功能,包括URL获取, HTTP会话,Cookie记录等
	requests网页请求：
		get():对应HTTP的GET方式
		post():对应HTTP的POST方式,用于传递用户数据
	
	requests对象属性：
		status_code:HTTP请求的返回状态,200表示连接成功,400表示失败
		text:HTTP相应内容的字符串形式,即url对应的页面内容
	更多方法参考:http://docs.python-requests.org/
	
//----------------------------------------------------------------------------------------------
	• 高效地解析和处理HTML,beautifulsoup4
	网页解析：
		结构化解析
		DOM (Document Object Model),树形结构
	
	BeautifulSoup解析网页：
	BeautifulSoup
	• 用于解析HTML或XML
	• pip install beautifulsoup4
	• import bs4
	• 步骤：
		1. 创建BeautifulSoup对象
		2. 查询节点
			find,找到第一个满足条件的节点
			find_all, 找到所有满足条件的节点
	
	创建对象：
	• 创建BeautifulSoup对象
	• bs = BeautifulSoup(
		url,
		html_parser, 指定解析器
		enoding
	)
	
	查找节点：
	• <a href=‘a.html’ class=‘a_link’>next page</a>
	• 可按节点类型、属性或内容访问
	• 按类型查找节点
		• bs.find_all(‘a’)
	• 按属性查找节点
		• bs.find_all(‘a’, href=‘a.html’)
		• bs.find_all(‘a’, href=‘a.html’, string=‘next page’)
		• bs.find_all(‘a’, class_=‘a_link’)
			• 注意:是class_
		• 或者bs.find_all(‘a’, {‘class’:’a_link’})
	
//----------------------------------------------------------------------------------------------
	Pandas：
	• 一个强大的分析结构化数据的工具集
	• 基础是NumPy,提供了高性能矩阵的运算
	• 应用,数据挖掘,数据分析
		• 如,学生成绩分析、股票数据分析等。
	• 提供数据清洗功能
	
	Pandas的数据结构：
	Series:
	• 类似一维数组的对象
	• 通过list构建Series
		• ser_obj = pd.Series(range(10))
	• 由数据和索引组成
		• 索引在左,数据在右
		• 索引是自动创建的
	• 获取数据和索引
		• ser_obj.index, ser_obj.values
	• 预览数据
		• ser_obj.head(n)
	• 通过索引获取数据
		• ser_obj[idx]
	• 索引与数据的对应关系仍保持在数组运算的结果中
	• 通过dict构建Series
	• name属性
		• ser_obj.name, ser_obj.index.name
		
	DataFrame：
	• 类似多维数组/表格数据 (如,excel, R中的data.frame)
	• 每列数据可以是不同的类型,what about ndarray?
	• 索引包括列索引和行索引
	• 通过ndarray构建DataFrame
	• 通过dict构建DataFrame
	• 通过列索引获取列数据(Series类型 )
	• df_obj[col_idx] 或 df_obj.col_idx
	• 增加列数据,类似dict添加key-value
	• df_obj[new_col_idx] = data
	• 删除列
	• del df_obj[col_idx]
	
	索引操作：
	• DataFrame索引
		• 列索引
			• df_obj[‘label’]
		•不连续索引
			• df_obj[[‘label1’, ‘label2’]]
	
	排序：
	• sort_index,索引排序
		• 对DataFrame操作时注意轴方向
	• 按值排序
		• sort_values(by=‘label’)
	
	Pandas统计计算和描述：
	常用的统计计算：
	• sum, mean, max, min...
	• axis=0 按列统计,axis=1按行统计
	• skipna 排除缺失值, 默认为True
	• idmax, idmin, cumsum
	
	统计描述：
	• describe 产生多个统计数据
	count():非NA值的数量
	describe():针对Series或DataFrame列计算汇总统计
	min()/max():计算最小值和最大值
	argmin()/argmax():计算能够获取到最小值和最大值的索引位置（整数）
	idxmin()/idxmax():计算能够获取到最小值和最大值的索引值
	quantile():计算样本的分位数（0到1）
	sum():值的总和
	mean():值的平均数
	median():值的算术中位数（50%分位数）
	mad():根据平均值计算平均绝对离差
	var():样本值的方差
	std():样本值的标准差
	skew():样本值的偏度（三阶矩）
	kurt():样本值的峰度（四阶矩）
	cumsum():样本值的累计和
	cummin()/cummax():样本值的累计最小值与最大值
	cumprod():样本值的累计积
	diff():计算一阶差分（对时间序列有用）
	pct_change():计算百分数变化
	
//----------------------------------------------------------------------------------------------
	
	Pandas数据清洗：
	•处理缺失数据：
		• dropna() 丢弃缺失数据
		• fillna() 填充缺失数据
	• 数据过滤：
		• df[filter_condition] 依据filter_condition对数据进行过滤
		
	Pandas数据可视化：
	• Pandas提供了内建的绘图功能(基于matplotlib)
	• plot(kind, x, y, title, figsize)
		x, y 横纵坐标对应的数据列
		title图像名称
		figsize图像尺寸
	• 保存图片
		plt.savefig()
	• 更多例子请参考:https://pandas.pydata.org/pandas-docs/stable/visualization.html
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
